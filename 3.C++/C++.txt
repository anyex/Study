一.命名空间
      命名空间将全局作用域分成不同的部分
		不同命名空间中的标识符可以同名而不会发生冲突
		命名空间也可以嵌套
		全局作用域也叫默认命名空间
   定义：
   1.  			namespace name{……}
   2.引用
		 使用整个命名空间：using namespace name;
		 使用命名空间中的变量：using namespace::variable;
		 使用默认命名空间中的变量：  ：：variable
   默认情况下可以直接使用默认命名空间中的所有标示符
   
 
二.C++对C的增强

    1.实用性增强，对于变量的定义位置，可以随意，没有要求	
          
		  int test1(void)
		  {
	            int  i = 0;
                    
               for(i = 0; i < 10; i++)
               {    
                    
               }    
                    
               for(int i = 0; i < 10; i++) {
               }    
                    
               return 0;
         }
    2.全局变量的检测能力增强，一个变量不论声明，定义，只能出现一次
	     int g_val;
		 int g_val = 10;
		 在C语言中会把同名变量归并到同一地址，能够通过编译，C++中不能
	
	3.C语言的struct定义了一组变量的集合，C编译器不认为这是一种新类型
	  C++中的struct是一个新类型的定义声明
	  如 struct teacher{int id;char name[20]};
	     调用teacher，不需要再写struct teacher
		 可以直接使用 teacher a ;声明
		 
	
	4.C++增加了bool类型
		bool只有两个值 false ,true;
		编译器会把非0值转换为true，0值转换为false
		
	5. ?:运算符的加强
		
	     void test()
		 {
		    int a = 10;
			int b = 20;
			(a < b ? a : b) = 30; //返回是a变量的别名 
	
	        cout << "a = " << a << endl;//输出30
			
			(a < b ? 10 : b); //返回中有常量，返回的是值，不能作为右值使用
		 }
	

	6. const 的加强
	       
		  void test6()
		  {
		     const int a = 10;
			 int *p = (int*)&a;//为a临时分配一个地址空间
			 
			 *p = 20;//改变的临时空间里的值，对a无影响
			 
			 printf("a = %d\n",a);
		  
		  }
		C语言中，能够通过指针的间接赋值改变a的值，C++中不能
		
		C++编译器对const常量的处理：
			当碰见常量声明时在符号表中放入常量
			编译过程中若发现使用常量则直接以符号表中的值替换
			编译过程中若发现对const使用了extern或&操作符，则给对应的常量分配存储空间
			
			C++编译器虽然为const常量分配空间，但不会使用其存储空间中的值
			
			    C++只是对于内置数据类型做常数替换，而对于像结构体这样的非内置数据类型则不会，
		    因为结构体类型不是内置的数据类型，编译器不知道如何直接替换，因此必须要访问内存
			获取数据，而访问内存必然可以被修改
			
			
			
			
			
			
    7.const 与 define的区别
			const在 编译的时候实现，define在预编译的时候实现
			define没有作用域的限制
	8. 枚举
			enum season{
			   SPR,
			   SUM,
			   AUT,
			   WIN
			};
			C： enum season s = SPR;
				s=0;
				s=1;
				s=2;
			C++中只能用enum中的元素直接赋值，不能用int类型数据，不用再int类型和枚举类型值中转换
			
	 
	 
	9. 引用
	      
		   1 引用没有定义，是一种关系型声明，声明它和原有某一变量(实体)的关系
				故其类型和原类型保持一致，且不分配内存，与被引用的变量有相同的地址
				
		   2 声明的时候必须初始化，一经声明，不可变更
		   
		   3 可对引用，再次引用，多次引用的结果，是某一变量具有多个别名
		   
		   4 &符号前有数据类型时，是引用，其它均为取地址
		   
		   5 引用作为其他变量的别名，因此可以在一些场合可以代替指针
		   
		       void swap(int& a,int &b)      void swap(int *pa,int* pb)
			   {							 {
					int t = a;					 int t = *pa;
				    a = b;						 *pa = *pb;
					b = t;						 *pb = t;
			   }							  }
			   
			   引用作为函数参数声明时，不进行初始化
			   
		   6 const 引用
				
				
				#include "stdio.h"
				
				int main()
				{
					const int& b = 1;
					
					int *p = (int*)&b;
					
					*p = 5;
					
					printf("a = %d\n",b);
					printf("b = %p\n",&b);
					
					return 0;
				}
				
				const& int e 相当于const int* const e
				普通引用相当于int* const e1
			    当使用常量对const引用进行初始化时，C++编译器会为常量分配空间，并用
				引用名作为空间的别名
				使用字面量对const引用初始化后，将生成一个只读变量
				
				
				
			7.函数返回值作为引用
				
					若返回栈变量(局部变量)：
						不能成为其他引用的初始值，不能作为左值使用
					
					若返回静态变量或全局变量
					
						可以成为其他引用的初始值（即可以做左值，也可以做右值）
						
	 
	              #include "stdio.h"
				  
				  int& f()
				  {
				    static int a = 0;
					return a;
				  }
				  
				  int& g()
				  {
				    int a = 0;
					return a;
				  }
						
	              int main()
				  {
				     int a = 0;
					 int& b = g();
					 f() = 10;
					 printf("a = %d\n",a);
					 printf("b = %d\n",b);
					 printf("f() = %d\n",f());
					 
					 return 0;
				  
				  }
				  
				
	10.内联函数
			 1  C++中可以使用内联函数替代宏代码片段，内联函数用inline关键字进行声明
			 
			 2  内联函数声明时inline关键字必须和函数定义结合在一起，否则编译器会直接忽略内联请求
			 
			 3  如果函数声明写了 inline 关键字  但是 函数定义没有写inline 编译器依然不会当inline函数处理
			
	         4  C++编译器可以将一个函数进行内联编译，被C++编译器内联编译的函数叫内联函数
			 
			 5  内联函数在最终生成的代码中没有定义，C++编译器直接将函数体插入在函数调用的地方，内联函数没有普通函数调用时的额外开销(压栈，跳转，返回)
			 
			 6  内联函数由编译器处理，直接将编译后的函数体插入调用的地方
			    宏代码片段由预处理器处理，进行简单的文本替换，没有任何编译过程
				
			 7  内联编译的限制：
								不要存在任何形式的循环语句
								不要存在过多的条件判断语句
								函数体不能过大
								不能堆函数进行取地址操作
								函数内联声明必须在调用语句之前
								
								内联函数相对于普通函数的优势只是省去了函数调用时压栈，跳转和返回的开销
								因此当函数体的执行远大于压栈，跳转和返回所用的开销时，内联没有意义
								
			                #define _CRT_SECURE_NO_WARNINGS

                            #include <iostream>
                            
                            using namespace std;
                            
                            #define MY_MAX(a, b) ((a) < (b)? (a):(b))
                            
                            inline int my_func(int a, int b)
                            {
                            	return (a < b ? a : b);
                            }
                            
                            inline void printAB(int a, int b);
                            
                            
                            int main()
                            {
                            	int a = 1;
                            	int b = 3;
                            
                            	int c = my_func(++a, b);//在编译时会将my_func(++a,b)展开为(a<b?a:b),从而消除了写成函数的开销
                            							//内联函数在调试模式中，不会被内联，会像普通函数一样生成含有调试信息的可执行代码
                            	                        
                            	printAB(++a, b);
                            
                            	printf("a = %d\n", a);
                            	printf("b = %d\n", b);
                            	printf("c = %d\n", c);
                            
                            	system("pause");
                            
                            	return 0;
                            	
                            }
                            
                            //printAB不能被内联
                            void printAB(int a, int b)
                            {
                            	cout << "a = " << a << ", b = " << b << endl;
                            }				
                         
	11.	默认参数
			
			1.C++在函数声明时会为参数提供一个默认值
			  当函数调用时没有指定这个参数的值，编译器会自动用默认值代替
			
			2.函数参数默认规则
				1 只有参数列表后面部分的参数才可以提供默认参数值
				2 一旦在一个函数调用中开始使用默认参数值，那么这个参数后的所有参数都必须使用默认参数值
				
				#include <iostream>
                  using namespace std;
                  void func(int a = 666)//如果不传递参数a就是666
                  {
                  	cout << "a = " << a << endl;
                  }
                  int main()
                  {
                  	func();
                  	func(10);
                  	return 0;
                  }
				  如上面的输出为 a=666
								 a=10;
			3 如果默认参数出现，那么右边的都必须有默认参数
					
					void printABC(int a,int b,int x=5,int y=4);
	
    12 占位参数
			
			1.占位参数只有参数类型声明，而没有参数名声明
			
			2.一般情况下，在函数体内部无法使用占位参数
			
			  如 int func(int a,int b,int);
			    调用函数时，必须调用func(1,2,3)写满三个参数
				
			3 可以将占位参数和默认参数结合起来
				
				 int func(int a,int b,int=0)
				 
				 占位参数主要是为了兼容C语言中不规范的写法和为了以后扩展程序
				 
	
	
	
	13 函数重载
	
	     1.函数：一个函数主要由函数返回值和函数参数列表（个数，类型，顺序）组成
		 
		   函数重载：即函数名相同，返回类型相同，参数列表不同
		   
		             函数返回值并不是构成函数重载的条件
					 
					 函数重载，最后不要写默认参数，避免调用出现函数冲突
					 
		     函数调用规则
					1.如果能够严格匹配调用完全匹配的
					2.如果没有完全匹配，调用隐式转换
					3.如果匹配不到，直接报错
					
		 		
		 2.重载底层实现
				
				C++利用name mangling技术来改名函数名，区分参数不同的函数名
				如 void func(char a)    //改名为func_c(char a)
				   void func(char a,int b,double c)//改名为func_cid(char a,int b,double c)
		
         3.函数重载和函数指针

				1.定义函数类型
					typedef int(MY_FUNC)(int ,int )
				2.定义一个函数类型的指针类型
				   
				    typedef int(*MY_FUNC_P)(int ,int )
					  //typedef是要声明的类型换个名字不是替换
				   
		   
		             #include <iostream>

                      using namespace std;
                      
                      typedef int(MY_FUNC)(int, int);
                      typedef int(*MY_FUNC_P)(int, int);
                      
                      
                      
                      
                      void func(int a)
                      {
                      	cout << "fun" << endl;
                      }
                      
                      int  func(int a, int b)
                      {
                      	cout << "a,b" << endl;
                      	return 0;
                      }
                      
                      int func(int a, int b, int v)
                      {
                      	cout << "a,b,v"<<endl;
                      	return 0;
                      }
                      int main(void)
                      {
                      	MY_FUNC *fp = NULL;
                      	fp = func;
                      	MY_FUNC_P fp1 = func;
                      	fp(20, 10);
                      	fp1(20, 40);
                      
                      	int(*fp3)(int, int,int);
                      
                      	fp3 = func;
                      	fp3(2, 3, 5);
                      	return 0;
                      }
                      			      
			           输出   a,b
                              a,b
                              a,b,v
							 
				在给函数指针赋值的时候就会发生函数重载匹配，在
				调用函数指针的时候，所调用的函数就已经固定
				
	14类的封装
		面向对象有三大特点：封装，继承，多态
		
			1 c++中将struct做了功能的增强，struct实际上就是一个class
			  只是struct内部，默认的访问控制权限是public
			
			2 class的类的内部，默认的访问控制权限是private
			
			3 访问控制权限
				public    用public标示的成员变量和函数，在类的外部和类的内部都可以访问
				
				protected 如果是单个类，跟private是一样的，在类的内部能够访问，在类的外部不能访问
				
				private   只能在类的内部访问
				
			4 C++是面向对象的语言，所有方法都封装在类中，通过一个个的对象进行编程
			     
				 实例化的类就是对象
				 
				 
			              #include "iostream"
                          using namespace std;
                          class MyDate {
                          public:
                          	void init_date()
                          	{
                          		cout << "年，月，日" << endl;
                          		cin >> year;
                          		cin >> month;
                          		cin >> day;
                          	};
                          
                          	void print_date()
                          	{
                          		cout << year << "年" << month << "月" << day << "日" << endl;
                          	}
                          
                          	bool is_leap_year()
                          	{
                          		if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0))
                          		{
                          			return true;
                          		}
                          
                          		return false;
                          	}
							
							//修改私有变量
							int getYear()
	                        {
	                        	return year;
	                        }
                            
	                        void setYear(int set_year)
	                        {
	                        	year = set_year;
	                        }
                          
                          protected://保护控制权限，在类的继承中与private有区别，在单个类中，跟private一样
                          private:
                          	int year;
                          	int month;
                          	int day;
                          };
                          
                          int main()
                          {
                          		MyDate mydate;
	                            mydate.init_date();
	                            mydate.print_date();
                                
	                            
	                            if (mydate.is_leap_year())
	                            {
	                            	cout << "是闰年" << endl;
	                            }
	                            else
	                            	cout << "不是闰年" << endl;
                                
								//通过内部方法修改和获取类的私有变量
	                            cout << "修改前：year = " << mydate.getYear() << endl;
	                            mydate.setYear(2018);
	                            cout << "修改后：year = " << mydate.getYear() << endl;
                           }
                                            			
			   
			            年，月，日
                        2015
                        2
                        4
                        2015年2月4日
                        不是闰年
                        修改前：year = 2015
                        修改后：year = 2018
                        			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
	15 构造与析构函数
			
		    1 构造函数
				
				1) 与类名相同的函数即构造函数，构造函数可以有参数，但不能有任何返回类型
				   构造函数在创建对象的时候就会自动调用
			
			2 析构函数
			
					当类的实例对象被销毁的时候会自动调用析构函数
				   
				        #include "iostream"
                        #include "string.h"
                        using namespace std;
                        
                        class test
                        {
                        public:
                        	//无参构造函数
                        	test()
                        	{
                        		m_x = 0;
                        		m_y = 0;
                        		name = (char*)malloc(100);
                        		
                        		cout << "m_x = " << m_x << "\t" << "m_y = " << m_y << endl;
                        	}
                        	test(int x)
                        	{
                        		m_x = x;
                        		m_y = 0;
                        		cout << "m_x = " << m_x << "\t" << "m_y = " << m_y << endl;
                        	}
                        	test(int x, int y)
                        	{
                        		m_x = x;
                        		m_y = y;
                        		cout << "m_x = " << m_x << "\t" << "m_y = " << m_y << endl;
                        	}
                        	~test() {
                        		if (name != NULL)
                        			free(name);
                        		cout << "析构函数被运行" << endl;
                        	};
                        private:
                        	int m_x;
                        	int m_y;
                        	char* name;
                        };
                        
                        
                        void tes()
                        {
                        	test s;
                        
                        }
                        int main()
                        {
                        	test test1(5);//调用一个参数的构造函数
                        	test test2;//调用无参构造函数
                        	test test3(5, 10);//调用两个参数的构造函数
                        	tes();
                        	return 0;
                        
                        }
                        输出：
						        m_x = 5 m_y = 0
                                m_x = 0 m_y = 0
                                m_x = 5 m_y = 10
                                m_x = 0 m_y = 0
                                析构函数被运行
								
				
		    3 拷贝构造函数
				 调用拷贝构造函数的时机
					1.一个对象以值传递的方式传入函数体
					2.一个对象以值传递的方式从函数返回
					3.一个对象需要通过另外一个对象进行初始化
				
				 生成默认的拷贝构造函数
					
					1.如果用户没有自定义拷贝构造函数，并在代码中使用到了拷贝构造函数，编译器
					  就会生成默认的拷贝构造函数
					  
					2.如果用户定义了一个构造函数，但不是拷贝构造函数，而此时代码中又用到了拷贝构造函数
					  编译器也会生成默认的构造函数
					  
					        #include "iostream"
                            using namespace std;
                            
                            class Test
                            {
                            public:
                            	//Test(){};默认的构造函数，当手动提供一个构造函数，默认的构造函数就被隐藏
                            
                            	Test(int x, int y)//当提供这个构造函数，默认的构造函数就不复存在
                            	{
                            		m_x = x;
                            		m_y = y;
                            	}
                            
                            	//无参数的构造函数
                            	Test() {
                            		m_x = 0;
                            		m_y = 0;
                            		cout << "调用了无参数的构造函数" << endl;
                            	}
                            
                            	//拷贝构造函数，通过另外一个Test对象another来初始化自己
                            	Test(const Test& another)
                            	{
                            		cout << "调用了拷贝操作符号" << endl;
                            		m_x = another.m_x;
                            		m_y = another.m_y;
                            	}
                            
                            	//等号操作符
                            	void operator = (const Test &t)
                            	{
                            		cout << "调用了=号操作符" << endl;
                            		m_x = t.m_x;
                            		m_y = t.m_y;
                            	}
                            
                            	void printT()
                            	{
                            		cout << "x: " << m_x << " y: " << m_y << endl;
                            	}
                            
                            	//提供一个析构函数
                            	~Test()
                            	{
                            		cout << " ~Test() 析构函数被执行了" << endl;
                            		cout << "(" << m_x << "," << m_y << ")" << "被析构了" << endl;
                            	}
                            
                            
                            
                            
                            private:
                            	int m_x;
                            	int m_y;
                            };
                            
                            //拷贝构造函数1
                            void test1()
                            {
                            	Test t1(1, 2);
                            	Test t2(t1);
                            
                            	//通过t1给t2进行赋值
                            	t2.printT();
                            }
                            //拷贝构造函数2
                            
                            void test2()
                            {
                            	Test t1(1, 2);
                            	Test t2;
                            	t2 = t1;//调用的不是拷贝构造函数，调用的是"="号操作符，也能够完成将
                            			//t1的值给t2但不是调用t2的拷贝构造函数
                            
                            }
                            
                            void func(Test t)
                            {
                            	cout << "func begin..." << endl;
                            	t.printT();
                            	cout << "func end..." << endl;
                            }
                            
                            //拷贝构造函数3
                            void test3()
                            {
                            	cout << "test3 begin..." << endl;
                            	Test t1(10, 20);//创建了一个t1的对象，通过t1的有参数的构造函数初始化
                            	func(t1);//一个对象以值的方式传入函数会调用拷贝构造函数
                            
                            	cout << "test3 end..." << endl;
                            }
                            
                            int func(void)
                            {
                            	int a = 10;
                            	return a;
                            }
                            
                            //拷贝构造函数4
                            Test func2()
                            {
                            	cout << "func2 begin..." << endl;
                            	Test temp(10, 20);
                            	cout << "func2 end..." << endl;
                            	return temp;//有一个临时的匿名对象temp，把temp的数据给到临时的匿名对象
                            				//返回一个对象也会调用拷贝构造函数
                            }
                            
                            void test4()
                            {
                            	cout << "test4 begin...." << endl;
                            	func2();
                            
                            	cout << "test4 end" << endl;
                            }
                            
                            void test5()
                            {
                            	cout << "test5 begin...";
                            	Test t1 = func2();
                            	cout << "test5 end...";
                            
                            }
                            
                            void test6()
                            {
                            	cout << "test6 begin..." << endl;
                            	Test t1;
                            	t1 = func2();
                            
                            	cout << "test6 end..." << endl;
                            }
                            
                            int main()
                            {
                            	test3();
                            	return 0;
                            }
                                                            
                            				
                
						
			 
			    4.深拷贝，浅拷贝
				
				    浅拷贝：如果复制的对象引用了一个外部内容(如分配在堆上的数据)，那么复制这个对象的时候，
							让新旧对象指向同一个外部内容（指针虽然复制，但指向的空间内容没有复制，而是两个对象共用）
				            
					深拷贝：如果复制这个对象的时候为新对象制作了外部对象的独立复制，就是深拷贝
					
					
				5.构造函数的初始化列表
					
					1.使用情况
						需要初始化的数据成员是对象
						需要初始化const修饰的类成员
						需要初始化引用成员数据
					
					当有一个类成员，本身是类或结构，而且这个成员只有一个带参数的构造函数，没有默认构造函数，这时要对这个类成员进行初始化
					就必须调用这个类成员的带参数的构造函数
					
					当类成员中含有一个const对象时，或是一个引用时，他们也必须通过成员初始化列表进行初始化
					因为这个两种对象要在声明后马上初始化，而在构造函数中做的是它们的赋值，
					初始化列表中的初始化顺序，与声明顺序有关，与前后赋值顺序无关
					
					
	16 对象动态建立和释放new和delete
			
			new和delete是运算符，不是函数，因此执行效率提高
			
			new：动态分配堆内存的运算符
			
			  使用形式   指针变量 = new 类型(常量)
						 指针变量 = new 类型[表达式]
			
			delete 释放已分配的内存空间
			
				使用形式：delete 指针变量		
						  delete[]  指针变量
						  
						  
					"指针变量"必须是一个new返回的指针
					
					
					
			
			例 new int；
						//开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针)
			
			   new int(100);
						//同上，只是指定初值为100
						
			   new char[10];
						//开辟一个存放字符数组(10个元素)的空间，返回首元素的地址
						
			   new int[5][4];
						//开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址
			   
			   float *p = new float(3.14);
						//开辟一个存放单精度数的空间，并指定该实数的初值为3.14
						  返回该空间的地址赋值给指针变量p
						  
				当无法正常分配空间时，会返回一个空指针NULL
				
				malloc 不会调用类的构造函数，new会
				free 不会调用类的析构函数，delete会调用类的析构函数
	
	
	17 静态成员和成员函数
			
			在C++中，静态成员是属于整个类的而不是某个对象，静态成员变量只存储一份供所有对象共用
			
			声明：static 数据类型 成员变量（类内部）
			初始化：数据类型 类名:: 静态数据成员 = 初值(类外部)
			
			调用：
				类名::静态数据成员	
				类对象.静态数据成员
				
				static 成员变量实现了同类对象间信息共享
				static 成员类外存储，求类的大小并不包括在内，它是属于类的全局变量，存储在data区
				static 成员只能类外初始化
				static 成员可以通过类名访问(没有实例对象也可以)，也可以通过对象访问
				
				
				
			 
			静态成员函数
				
				静态成员函数的意义不在于信息共享，数据沟通，而在于管理静态数据成员，完成第静态数据成员的封装
				静态成员函数只能访问静态数据成员，静态成员函数属于类，不属于对象，没有this指针
				
					
	18 编译器对属性和方法的处理机制
			
			C++类对象中的成员变量和成员函数是分开存储的
		成员变量
			
			普通成员变量：存储对象中，与struct变量有相同的内存布局和字节对齐方式
			
			静态成员变量：存储于全局数据区
			
		成员函数
			 存储于代码段中
			 C++中类的普通函数都隐式包含一个指向当前对象的this指针
			 静态成员函数不包括指向具体对象的指针
			 普通成员函数包含一个指向具体对象的指针
			 
			 若类成员函数的形参合类的属性，名字相同，可以通过this指针来区别
			 类的成员函数可以使用const修饰
			 
	19 全局函数和成员函数
	       Test&	add(Test	&t2)	//*this	//函数返回引⽤
            {																																				
                  this->a	=	this->a	+	t2.getA();																			
                  this->b	=	this->b	+	t2.getB();																																			
                  return	*this;	//*操作让this指针回到元素状态
            }																																																																																
            Test	add2(Test	&t2)	//*this	//函数返回元素
            {																
                     //t3是局部变量
                   Test	t3(this->a+t2.getA(),	this->b	+	t2.getB())	;	
                     return	t3;																																							
            }		
			
			
	
	
	20 友元
		  友元可以是一个函数（友元函数），也可以是一个类(友元类)
		  
		  友元函数
				友元函数是可以直接访问类的私有成员的非成员函数，它是定义在类外的普通函数
				它不属于任何类，但是需要在类的定义在加以声明，声明时，只需要在友元的名称前加上关键字friend
				    即：friend 类型  函数名(形式参数)
					    
						一个函数可以是多个类的友元函数，只需要在各个类中分别声明
						
		  友元对象
				友元类的所有成员函数都是另外一个类的友元函数，都可以访问另外一个类中的隐藏信息(私有成员)
				
				当希望一个类可以存取另外一个类的私有成员时，可以将该类声明为另一类的友元类
					
				    定义友元类
						friend class 类名
						    其中：friend和class是关键字，类名必须是程序中一个已经定义过的类
							
							class A
							{
								....
								public:
									friend class B;
								....
								
							}
			           
			                上面的定义让类B的所有成员函数都是类A的友元函数，能存取类A的私有成员和保护成员
		   
		   
		   总结：
				友元声明位置：友元声明以关键字friend开始，它只能出现在类定义中，因为右元不是授权类成员
							  所以它不受所在类的声明区域private,public,protected的影响
							  
							  通常把所有友元声明组织在一起并放在类头之后
							  
				友元的利弊
							  友元不是类成员，但是它可以访问类中的私有成员，友元的作用在于提高程序的运行效率
							  但是它破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员
							  
				   注：1   友元关系不能被继承
				   
					   2   友元关系是单向的，不具有交换性，若类B是类A的友元，类A不一定是类B的友元
					     要看在类中是否有相应的声明
					   
					   3   友元关系不具有传递性，若类B是类A的友元，类C是类B的友元,类C不一定是类A的友元
					   
					   
	
	21 运算符重载
			所谓重载就是重新赋予新的含义。函数重载就是对一个已有的函数赋予新的含义
			使之实现新功能，因此一个函数名就可以用来代替不同功能的函数，也就是一名多用
			
			运算符重载的本质也是函数重载
			
			重载函数的一般格式
				函数类型 operator 运算符名称（形参列表）
				{
				   重载实体;
				}
				
				operator 运算符名称 在一起构成了新的函数名
					const Complex operator+ (const Complex &c1,const Complex &c2)
					称为 operator+ 重载了运算符+
	
				
					
			重载规则
				1) C++不允许用户自己定义新的运算符，只能对已有的C++运算符进行重载
				2）C++不允许被重载的运算符  ?:   .   ::   sizeof   .*
				3) 重载不能改变运算符运算对象(即操作数)的个数
				4) 重载不能改变运算符的优先级别
				5) 重载不能改变运算符的结合性
				6) 重载运算符的函数不能有默认的参数
				7) 重载的运算符必须和用户定义的自定义类型的对象一起使用，其参数至少应有一个类对象
				   即，不能全是C++标准类型
				8) 用于类对象的运算符一般必须重载，但有两个例外，运算符"=",和运算符"&"不必重载
				
				
	
	22 多态
			
			C++的多态性：在基类函数前加上virtual关键字，在派生类中重写该函数，运行时会根据对象的实际类型
						 调用相应的函数，如果对象类型是派生类，就调用派生类的函数，如果对象类型是基类,就
						 调用基类的函数
						 
						 1.用virtual关键字声明的函数叫虚函数，虚函数也是类的成员函数
						 2.存在虚函数的类都有一个一维的虚函数表叫做虚表，类的对象都有一个指向虚表的虚指针
							虚表是类对应的，虚表指针是和对象对应的
						 3.多态是一个接口多种实现，是面向对象的核心，分为类的多态性和函数的多态性
						 4.多态用虚函数来实现，结合动态绑定
						 5.纯虚函数是虚函数加上=0
						 6.抽象类是指包括一个纯虚函数的类
						 
						纯虚函数数 virtual void fun() = 0即抽象类，必须在子类中实现这个函数
						
			多态的原理
					1.每一个类都有虚表
					
					2.虚表可以继承，如果子类没有重写虚函数，那么子类虚表中仍然会有该函数的地址，只不过这个地址指向的是基类的
					  虚函数实现，如果基类有3个虚函数，那么基类的虚表中就有三项(虚函数地址)，派生类也会有虚表，至少有三项，如果
					  重写了相应的虚函数，虚表中的地址就会改变，指向自身的虚函数实现，如果派生类有自己的虚函数，虚表中就会添加该项
					
					3.派生类的虚表中虚地址的排列顺序和基类中的虚表中虚函数地址排列顺序相同
					
					4.函数的多态性是指一个函数被定义成多个不同参数的函数，当调用这个函数时，就会调用不同的同名函数
					
					5.一般情况下，当我们用一个指针/引用调用一个函数的时候，被调用的函数取决于这个指针/引用的类
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					